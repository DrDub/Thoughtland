predicate pred-intro
  variables
    req def cloud : c-full-cloud 
  properties  
  output
    template "There are @components. components and @dimensions. dimensions. "
    components    cloud.components
    dimensions    cloud.dimensions
    ; preds
    pred c-conjunction
    0 
      pred has-components
      pred0 cloud
      pred1 components
    1 
      pred has-dimensions
      pred0 cloud
      pred1 dimensions

predicate pred-component
  variables
    req cloud : c-full-cloud
    def component : c-n-ball
  properties  
    component == cloud.component
  output
    template "There is a component @name.. "
    name       component.name
    pred c-conjunction
    0
      pred has-component
      pred0 cloud
      pred1 component
    1
      pred attributive
      pred0 component
      pred1 name

predicate pred-size
  variables
    req def component : c-n-ball
    size : c-size
  properties  
    size == component.size
  output
    template "Component @name.'s size is @magnitude.. "
    name       component.name
    magnitude  size.magnitude.#TYPE
    pred has-size
    pred0 component
    pred1 magnitude

predicate pred-density
  variables
    req def component : c-n-ball
    density : c-density
  properties  
    density == component.density
  output
    template "Component @name.'s density is @magnitude.. "
    name       component.name
    magnitude  density.magnitude.#TYPE
    pred has-density
    pred0 component
    pred1 magnitude

predicate pred-distance
  variables
    req component : c-n-ball
    other : c-n-ball
    def distance : c-distance
  properties
    component != other  
    distance.component == component
    distance.component == other
  output
    template "Component @name1.'s distance to component @name2. is @magnitude.. "
    name1       component.name
    name2       other.name
    magnitude  distance.magnitude.#TYPE
    pred has-distance
    pred0 component
    pred1 other
    pred2 distance

; schema starts here

;    star
;      pred-distance(cloud|full-cloud,component|component,component2|component2)

schema by-component(whole: c-full-cloud)  
  ; name of the schema 'by-component'
  ; whole is the cloud of points, with components

  ; first sentence, overall numbers
  pred-intro(cloud|whole)
  plus ; go
    pred-component(cloud|whole,component|component)
    optional
      pred-size(component|component)
    optional
      pred-density(component|component)
    aggregation-boundary
    star
      pred-distance(component|component)
